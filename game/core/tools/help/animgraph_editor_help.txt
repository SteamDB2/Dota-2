<!-- schema text {7e125a45-3d83-4043-b292-9e24f8ef27b4} generic {198980d8-3a93-4919-b4c6-dd1fb07a3a4b} -->
CHelpData CHelpData_0
{
	CHelpEntry[] m_Entries = 
	[
		CHelpEntry
		{
			string m_Id = "Element.CStateMachineAnimNode"
			string m_FriendlyName = "State Machine Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Graph node that uses states, transitions, and conditions to determine which child node should be used"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CStateMachineAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CSequenceAnimNode"
			string m_FriendlyName = "Keyframe Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Represents a single keyframed animation (Sequence) and is responsible for its basic playback as part of the graph.  \n\nResetting a Keyframed Anim Node will set its playback time (and current frame) back to zero.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSequenceAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the name of the selected sequence.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSequenceAnimNode.m_sequenceName"
			string m_FriendlyName = "Sequence"
			string m_TooltipOverride = ""
			string m_HelpText = "The sequence that this node will play"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSequenceAnimNode.m_playbackSpeed"
			string m_FriendlyName = "Playback Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "The speed scale at which the animation will be played.  eg: <br/>\n 1 : Normal Speed <br/>\n 2 : Twice normal speed <br/>\n 0 : No speed; freeze on the current frame <br/>\n-1 : Play backwards\n\nNote that this value also affects the value of the duration that this node returns to its parents.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSequenceAnimNode.m_bLoop"
			string m_FriendlyName = "Loop"
			string m_TooltipOverride = ""
			string m_HelpText = "Whether or not the animation should loop"
		},
		CHelpEntry
		{
			string m_Id = "Element.CChoiceAnimNode"
			string m_FriendlyName = "Choice Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "This node randomly chooses one of its children to play"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAddAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CRootAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CCycleControlAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_choiceMethod"
			string m_FriendlyName = "Method"
			string m_TooltipOverride = ""
			string m_HelpText = "The logic used to pick a child node.  <br/>\n<b>-<em> WeightedRandom:</em></b> Randomly choose the next child based on their weighting.  Can pick the same child twice in a row. <br/>\n<b>- <em>WeightedRandomNoRepeat:</em></b> Same as WeightedRandom, but prevents the same child from being chosen twice in a row. <br/>\n- Iterate: The next selected child is the one that comes after the current one. <br/>\n<b>- <em>IterateRandom:</em></b> Randomly choose between the children that have not been played, and don\'t repeat any children until they\'ve all been played.  <br/>\n"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_choiceChangeMethod"
			string m_FriendlyName = "Change Selection"
			string m_TooltipOverride = ""
			string m_HelpText = "Determine when the node selects a new child: <br/>\n- <b>OnReset:</b> Only make a new choice when the node is reset by its parent <br/>\n- <b>OnCycleEnd:</b> Make a new selection when the current one has finished playing.  <br/>\n- <b>OnResetOrCycleEnd:</b> Make a new choice when the node is reset or when the current selecion\'s cycle ends"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_blendTime"
			string m_FriendlyName = "Blend Duration"
			string m_TooltipOverride = ""
			string m_HelpText = "When a new choice has been made and the node has not been reset, the node will blend from the old choice to the new one.  This is how long the node should take to perform that blend.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_bResetChosen"
			string m_FriendlyName = "Reset On Selection"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, the child nodes will be reset when they get selected"
		},
		CHelpEntry
		{
			string m_Id = "Element.CMoverAnimNode"
			string m_FriendlyName = "Mover Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Creates root motion procedurally"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_bApplyMovement"
			string m_FriendlyName = "Generate Movement"
			string m_TooltipOverride = ""
			string m_HelpText = "Create root motion that matches the movement direction and speed input to the graph"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_bOrientMovement"
			string m_FriendlyName = "Orient Movement"
			string m_TooltipOverride = ""
			string m_HelpText = "Add rotation root motion to turn the character to face the direction set in the \"Turn to Face\" property"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_facingTarget"
			string m_FriendlyName = "Face Direction"
			string m_TooltipOverride = ""
			string m_HelpText = "If the \"Turn to Face\" property is true, this is the direction that the character will turn towards.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_bLimitTurnSpeed"
			string m_FriendlyName = "Limit Turn Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "If \"Orient Movement\" is true, this toggles whether or not rate of turn should be clamped"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_flMaxTurnSpeed"
			string m_FriendlyName = "Max Turn Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "If the rate of turn is clamped (ie: \"Limit Turn Speed\" is true), this is the speed (in degrees per second) that the turn rate will be clamped to.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_bAdditive"
			string m_FriendlyName = "Additive"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, the root motion generated by this node will be added to the root motion produced by its children.  <br/>\n<br/>\nIf false, then the root motion from the children of this node will be ignored, and the root motion generated by this node will replace it.  \n"
		},
		CHelpEntry
		{
			string m_Id = "Element.CBlendAnimNode"
			string m_FriendlyName = "Blend 1D Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "A 1-Dimensional blend between a set of child nodes.  \n<br/>\n<br/>\nThe node is given an input parameter to track, and each node is given a value.  The node will then find the two children whose values the input parameter is between, and blend between them.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_blendValueSource"
			string m_FriendlyName = "Blend Source"
			string m_TooltipOverride = ""
			string m_HelpText = "The input source that is driving the blend"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_param"
			string m_FriendlyName = "Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "If the Blend Source is set to \"Parameter\", this needs to be set to the parameter that should be used.  Note that only Float parameters are supported.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_bLoop"
			string m_FriendlyName = "Loop"
			string m_TooltipOverride = ""
			string m_HelpText = "Toggle whether or not the playback of the child nodes should loop.\n<br/>\n<br/>\nNote that the Blend 1D node explicitly controls the playback of its children, so that it can ensure that their cycles always match, even if the animations are different lengths.  This means that the loop setting on the children of blend nodes is ignored, and only the loop setting on the Blend 1D node matters.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_bLockBlendOnReset"
			string m_FriendlyName = "Lock Blend on Reset"
			string m_TooltipOverride = ""
			string m_HelpText = "When false, the blend is refreshed every frame.\n<br/>\n<br/>\nWhen true, the blend is only refresh when the node is reset.  The cycle advances normally, however.  This is so that you can keep the blend value the same for the duration of the playback of an animation, even if the input value changes.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CRootAnimNode"
			string m_FriendlyName = "Final Pose"
			string m_TooltipOverride = ""
			string m_HelpText = "The top level (ie: right-most) node of the tree.  Each update of the graph, evaluation starts from here.  \n<br/>\n<br/>\nEach graph must have exactly one Final Pose node in order to work.  \n<br/>\n<br/>\n"
		},
		CHelpEntry
		{
			string m_Id = "Element.CAddAnimNode"
			string m_FriendlyName = "Additive Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Additively blend two child nodes together"
		},
		CHelpEntry
		{
			string m_Id = "Element.CAnimState"
			string m_FriendlyName = "State"
			string m_TooltipOverride = ""
			string m_HelpText = "A state in the state machine.  Each state corresponds to one child of this anim node in the graph"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimState.m_name"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of this state. "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimState.m_bIsStartState"
			string m_FriendlyName = "Start State"
			string m_TooltipOverride = ""
			string m_HelpText = "Toggles whether this state should be the current state when the graph is reset.  Each state machine should have exactly one start state.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimState.m_bIsEndtState"
			string m_FriendlyName = "End State"
			string m_TooltipOverride = ""
			string m_HelpText = "Is a state is marked as an End State, and its child is \"finished\", then the state machine will tell its parent that it also is \"finished\".  State machines can have zero or more End States"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimState.m_bIsPassthrough"
			string m_FriendlyName = "Passthrough"
			string m_TooltipOverride = ""
			string m_HelpText = "Normally when a state becomes the current state, its exit transitions are not evaluated until the next time the graph is updated.  Setting a state as a Passthrough State will cause it to evaluate its exit transitions during the same update that it becomes the current state.  So its possible for the state become the current state, then pass control to another state in the same frame.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimState.m_bIsRootMotionExclusive"
			string m_FriendlyName = "Exclusive Root Motion"
			string m_TooltipOverride = ""
			string m_HelpText = "Normally, root motion and the animation itself is blended between the old state and the new state when a state transition occurs.  \n<br/>\n<br/>\nWhen this option is set and this state becomes the current state, only its root motion is used, and it is not blended with the root motion of the old state, but the animation is still blended"
		},
		CHelpEntry
		{
			string m_Id = "Element.CAnimStateTransition"
			string m_FriendlyName = "Transition"
			string m_TooltipOverride = ""
			string m_HelpText = "A transition between two states.  Defines what conditions need to be met in order for the transition to be taken, and how the old node should blend into the new node.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimStateTransition.m_blendDuration"
			string m_FriendlyName = "Blend Duration"
			string m_TooltipOverride = ""
			string m_HelpText = "How long the blend from the old state to the new state should take"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimStateTransition.m_bReset"
			string m_FriendlyName = "Reset Destination"
			string m_TooltipOverride = ""
			string m_HelpText = "When true, the child node connected to the destination state will be reset when this transition is taken.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimStateTransition.m_resetCycleOption"
			string m_FriendlyName = "Start Cycle At"
			string m_TooltipOverride = ""
			string m_HelpText = "Set the cycle that the destination state should be reset to. \n<UL>\n<LI> <b>Beginning</b> : Set the state\'s cycle to 0\n<LI> <b>SameAsSourceState</b> : Set the destination state\'s cycle to the source state\'s cycle\n<LI> <b>InverseSourceCycle</b> : Set the destination state\'s cycle to (1 - source state\'s cycle)\n</UL>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_bTurnToFace"
			string m_FriendlyName = "Turn to Face"
			string m_TooltipOverride = ""
			string m_HelpText = "Toggle whether or not the character\'s body should turn to face a direction"
		},
		CHelpEntry
		{
			string m_Id = "Element.CAimMatrixAnimNode"
			string m_FriendlyName = "Aim Matrix Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Treats each frame of a single animation as the pose for a direction, and will blend them to create a combined pose to \"aim\" the character in that given direction"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_sequenceName"
			string m_FriendlyName = "Sequence"
			string m_TooltipOverride = ""
			string m_HelpText = "The sequence containing the aim poses in each frame.  Assumes that the frames are set up like this:\n\n<OL>\n<LI> Bottom Left\n<LI> Bottom Center\n<LI> Bottom Right\n<LI> Middle Left\n<LI> Middle Center\n<LI> Middle Right\n<LI> Up Left\n<LI> Up Center\n<LI> Up Right\n<LI> Straight Up\n</OL>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_fAngleIncrement"
			string m_FriendlyName = "Angle Increment"
			string m_TooltipOverride = ""
			string m_HelpText = "The angle difference between the center pose and the outer poses.  eg: if the Angle Increment is 45, then the right pose is assumed to point 45 degrees to the right, the up pose points 45 degrees up, etc."
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_targetDirection"
			string m_FriendlyName = "Target Direction"
			string m_TooltipOverride = ""
			string m_HelpText = "The input vector that is driving the blend.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_param"
			string m_FriendlyName = "Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "If <b>Target</b> is set to <em>Position Parameter</em>, this field is the anim parameter that is driving the blend.  Note that only Vector parameters are displayed as options"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_forwardDirection"
			string m_FriendlyName = "Forward Direction"
			string m_TooltipOverride = ""
			string m_HelpText = "The direction (in Model Space) that represents \'forward\' for the blend.  By default, Source2 assumes +X is forward"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_damping"
			string m_FriendlyName = "Damping"
			string m_TooltipOverride = ""
			string m_HelpText = "Settings for damping the motion of the blended aim over time"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimInputDamping.m_speedFunction"
			string m_FriendlyName = "Speed Function"
			string m_TooltipOverride = ""
			string m_HelpText = "Controls how damped speed is adjusted based on how far the current value is from the target value.  \n\n<UL>\n<LI> <b>No Damping:</b> Damping is not applied.  \n<LI> <b>Constant:</b> The damping speed does not change with distance from the target value\n<LI> <b>Spring:</b> A critically damped spring is used to accelerate the current value toward the target value.  The farther the current value is from the target, the more the acceleration.  However the spring will not overshoot the target value.  \n</UL>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimInputDamping.m_fSpeedScale"
			string m_FriendlyName = "Speed Scale"
			string m_TooltipOverride = ""
			string m_HelpText = "Scales the speed of the damping, or in the case of the Spring <b>Speed Function</b> it controls the strength of the spring.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimInputDamping.m_bLimitSpeed"
			string m_FriendlyName = "Limit Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "Toggle whether or not to clamp the damping speed"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimInputDamping.m_flMinSpeed"
			string m_FriendlyName = "Min Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "If <b>Limit Speed </b>is set, this is the slowest speed that the dampened value can change at.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimInputDamping.m_flMaxSpeed"
			string m_FriendlyName = "Max Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "If <b>Limit Speed </b>is set, this is the fastest speed that the dampened value can change at.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_damping"
			string m_FriendlyName = "Damping"
			string m_TooltipOverride = ""
			string m_HelpText = "Controls how fast the character will turn when <b>Turn to Face</b> is true.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_flRootMotionBlend"
			string m_FriendlyName = "Root Motion Blend"
			string m_TooltipOverride = ""
			string m_HelpText = "Controls how the root motion is blended between the two source animations.  A value of 0 means use only the motion from child1, a value of 1 means use only child2"
		},
		CHelpEntry
		{
			string m_Id = "Element.CDirectPlaybackAnimNode"
			string m_FriendlyName = "Direct Playback Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Allows game code to tell the graph the play a sequence at this point in the graph hierarchy.  This node is necessary in order to play scripted sequences.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSequenceAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CRootAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CStateMachineAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CCycleControlAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAddAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSubtractAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSpeedScaleAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CWayPointHelperAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoreoAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectPlaybackAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTwoBoneIKAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLeanMatrixAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_bSyncCycles"
			string m_FriendlyName = "Sync Cycles"
			string m_TooltipOverride = ""
			string m_HelpText = "Set this option to true to make all the blended animations have the same cycle.  The blend node will adjust the playback speed of its children so that they after each tick their cycles match.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_damping"
			string m_FriendlyName = "Damping"
			string m_TooltipOverride = ""
			string m_HelpText = "Controls how the output of this node is blended over time"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimInputDamping.m_fMinSpeed"
			string m_FriendlyName = "Minimum Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "Enforce a minimum speed at which the current value should approach the target value.  Especially important for the Spring setting, as the speed gets very slow as it approaches its target value.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CCycleControlAnimNode"
			string m_FriendlyName = "Cycle Control"
			string m_TooltipOverride = ""
			string m_HelpText = "Allows the cycle of its child\'s animation to be set directly by a parameter"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CCycleControlAnimNode.m_param"
			string m_FriendlyName = "Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "The parameter to use to control the cycle of the child node.  Only support Float parameters"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAddAnimNode.m_bResetBase"
			string m_FriendlyName = "Reset Base Child"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, then when this node receives a reset it will forward the reset on to its Base Child"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAddAnimNode.m_bResetAdditive"
			string m_FriendlyName = "Reset Additive Child"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, then when this node receives a reset it will forward the reset on to its Additive Child"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSubtractAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSpeedScaleAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CWayPointHelperAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoreoAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectPlaybackAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTwoBoneIKAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLeanMatrixAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CSubtractAnimNode"
			string m_FriendlyName = "Subtract Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Subtract the current pose of one animation from another, and return the result"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSubtractAnimNode.m_bResetBase"
			string m_FriendlyName = "Reset Base Child"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, then when this node receives a reset it will forward the reset on to its Base Child"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSubtractAnimNode.m_bResetSubtract"
			string m_FriendlyName = "Reset Subtracted Child"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, then when this node receives a reset it will forward the reset on to its Subtracted Child"
		},
		CHelpEntry
		{
			string m_Id = "Element.CTurnHelperAnimNode"
			string m_FriendlyName = "Turn Helper Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Creates additional root motion so that turn animations can be used to turn arbitrary distances.  Eg: use a 90 degree turn anim to turn 87 degrees or 102 degrees\n\nIt does this by looking at the amount of rotation that happens over the length of the child to figure out what angle the character would face with the animation alone.  Then over the course of the animation it will add or remove rotation so that when the animation is done, its facing the desired direction.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_facingTarget"
			string m_FriendlyName = "Turn to Face"
			string m_TooltipOverride = ""
			string m_HelpText = "The direction that we want the character to face"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_turnStartTime"
			string m_FriendlyName = "Turn Start Time"
			string m_TooltipOverride = ""
			string m_HelpText = "The time (in seconds) at which this node should start applying the additional root rotation.  Try to time this with your animation to hide any foot sliding"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_turnDuration"
			string m_FriendlyName = "Turn Duration"
			string m_TooltipOverride = ""
			string m_HelpText = "How long (in seconds) after the start time that this node should take to apply its extra root rotation.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_bMatchChildDuration"
			string m_FriendlyName = "Match Child Duration"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, this setting will override the value set in <b>Turn Duration</b> and will instead use the duration of its child"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_bClampDurationToChild"
			string m_FriendlyName = "Clamp Turn to Child Duration"
			string m_TooltipOverride = ""
			string m_HelpText = "When true, this setting will clamp the Turn Duration so that the turn is finished by the time the child node has finished playing"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_bUseManualTurnOffset"
			string m_FriendlyName = "Use Manual Turn Offset"
			string m_TooltipOverride = ""
			string m_HelpText = "When turned off, this node will calculate the amount of rotation that its child node, and then procedurally generates the rest.\n\nWhen this option is on, the node will assume that the value of <b>Manual Turn Offset</b> is the amount of rotation of the child node, and will not calculate it.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_manualTurnOffset"
			string m_FriendlyName = "Manual Turn Offset"
			string m_TooltipOverride = ""
			string m_HelpText = "The amount of rotation that this node assumes the child nodes will provide"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_upDirection"
			string m_FriendlyName = "Up Direction"
			string m_TooltipOverride = ""
			string m_HelpText = "The up direction (in Model Space).  By default, Up in the Source2 engine is +Z"
		},
		CHelpEntry
		{
			string m_Id = "Element.CSpeedScaleAnimNode"
			string m_FriendlyName = "Speed Scale"
			string m_TooltipOverride = ""
			string m_HelpText = "Allows a parameter to directly control the playback speed of its child.  \n\nNote that playback speed is inherited: if a node tells its child to play at half speed, and that child node tells its child to play at half speed, then the last child will play at quarter speed.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSpeedScaleAnimNode.m_param"
			string m_FriendlyName = "Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "The parameter used to control the speed.  Only Float Parameters are supported.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_animNamePrefix"
			string m_FriendlyName = "Sequence Name Prefix"
			string m_TooltipOverride = ""
			string m_HelpText = "To avoid having to hook up 8 animations each time you use one of these nodes, you just need to give it the first part of the name of your animations, and it will append the suffixes to those names and load them. It looks for:\n\n*_n\n*_nw\n*_w\n*_sw\n*_s\n*_se\n*_e\n*_ne"
		},
		CHelpEntry
		{
			string m_Id = "Element.CDirectionalBlendAnimNode"
			string m_FriendlyName = "Directional Blend"
			string m_TooltipOverride = ""
			string m_HelpText = "Like a Blend 1D, but specially configured for blends based on direction.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_blendValueSource"
			string m_FriendlyName = "Blend Source"
			string m_TooltipOverride = ""
			string m_HelpText = "The value that controls the blend"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_param"
			string m_FriendlyName = "Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "If <b>Blend Source</b> is set to \"Parameter\", then this field indicates which parameter to use.  Only supports Float Parameters"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_bLoop"
			string m_FriendlyName = "Loop"
			string m_TooltipOverride = ""
			string m_HelpText = "When true, the cycle of the blended animations will loop"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_bLockBlendOnReset"
			string m_FriendlyName = "Lock Blend on Reset"
			string m_TooltipOverride = ""
			string m_HelpText = "Setting this to true will cause the blend weights to only get recalculated when this node is reset"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_playbackSpeed"
			string m_FriendlyName = "Playback Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "The speed at which the animations should be played back.  ie: 1 is normal speed, 2 is twice normal speed.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectionalBlendAnimNode.m_damping"
			string m_FriendlyName = "Damping"
			string m_TooltipOverride = ""
			string m_HelpText = "Controls how the blend value can optionally be interpolated to the target value.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CWayPointHelperAnimNode"
			string m_FriendlyName = "WayPoint Helper"
			string m_TooltipOverride = ""
			string m_HelpText = "This node helps steer its animation so that it ends at a navigation waypoint"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CWayPointHelperAnimNode.m_flStartCycle"
			string m_FriendlyName = "Start Cycle"
			string m_TooltipOverride = ""
			string m_HelpText = "The cycle when this node should start steering the character"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CWayPointHelperAnimNode.m_flEndCycle"
			string m_FriendlyName = "End Cycle"
			string m_TooltipOverride = ""
			string m_HelpText = "The cycle at which this node should stop steering the character"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CWayPointHelperAnimNode.m_bOnlyGoals"
			string m_FriendlyName = "Only align to Goals"
			string m_TooltipOverride = ""
			string m_HelpText = "Tells the node to only steer the character if the current waypoint is the goal of the current navigation path"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CWayPointHelperAnimNode.m_bPreventOvershoot"
			string m_FriendlyName = "Prevent Overshoot"
			string m_TooltipOverride = ""
			string m_HelpText = "Allow steering to prevent the character from going past the waypoint"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CWayPointHelperAnimNode.m_bPreventUndershoot"
			string m_FriendlyName = "Prevent Undershoot"
			string m_TooltipOverride = ""
			string m_HelpText = "Apply steering if the character\'s motion will not take them far enough to reach the waypoint"
		},
		CHelpEntry
		{
			string m_Id = "Element.CBoneMaskAnimNode"
			string m_FriendlyName = "Bone Mask"
			string m_TooltipOverride = ""
			string m_HelpText = "Creates a new pose by doing a per-bone blend of two base poses.  The per-bone weights are defined in the model editor"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_weightListName"
			string m_FriendlyName = "Bone Mask"
			string m_TooltipOverride = ""
			string m_HelpText = "Pick which set of per-bone weights to use to blend the two child poses together.  This list is from the list of bone masks that are created on the model"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_bResetChild1"
			string m_FriendlyName = "Reset Child1"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, then when this node receives a reset it will forward the reset on to Child1"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_bResetChild2"
			string m_FriendlyName = "Reset Child2"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, then when this node receives a reset it will forward the reset on to Child2"
		},
		CHelpEntry
		{
			string m_Id = "Element.CChoreoAnimNode"
			string m_FriendlyName = "Choreo"
			string m_TooltipOverride = ""
			string m_HelpText = "This node is repsonsible for responding to requests from FacePose to play choreo gestures and postures"
		},
		CHelpEntry
		{
			string m_Id = "Element.CTwoBoneIKAnimNode"
			string m_FriendlyName = "Two-Bone IK"
			string m_TooltipOverride = ""
			string m_HelpText = "Implements a simple solver for 2 bone (plus 1 end-effector bone) inverse kinematics.  The IK chains are defined in the model editor.  The targets for the IK chain are attachments (ie: offsets from other bones in the skeleton, also defined in the model editor).  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTwoBoneIKAnimNode.m_ikChainName"
			string m_FriendlyName = "IK Chain"
			string m_TooltipOverride = ""
			string m_HelpText = "The chain of bones to perform the IK solve on"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTwoBoneIKAnimNode.m_attachmentName"
			string m_FriendlyName = "Target Attachment"
			string m_TooltipOverride = ""
			string m_HelpText = "The Attachment that the end effector of the IK chain should be moved to.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTwoBoneIKAnimNode.m_fallbackHingeAxis"
			string m_FriendlyName = "Fallback Hinge Axis"
			string m_TooltipOverride = ""
			string m_HelpText = "When the initial pose of the bones in the IK chain has a bend in it, the IK solver will preserve that existing axis of rotation.  But when the bones start out perfectly straight the solver will use this vector as the axis of rotation.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTwoBoneIKAnimNode.m_bMatchTargetOrientation"
			string m_FriendlyName = "Match Target Orientation"
			string m_TooltipOverride = ""
			string m_HelpText = "When true, the end effector bone in the IK chain will be rotated to match the orientation of the target Attachment"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_timingBehavior"
			string m_FriendlyName = "Timing Control"
			string m_TooltipOverride = ""
			string m_HelpText = "Choose how the node handles interprets and manages the playback of its children, and how its presents it own timing to its parent.    \n\n<UL>\n<LI> <B>Use Child1:</B> Use the cycle and duration of Child1 as the cycle and duration of this node.  The child nodes are not synchronized.   \n<LI> <B>Use Child2:</B> Use the cycle and duration of Child2 as the cycle and duration of this node.  The child nodes are not synchronized.   \n<LI> <B>Synchronize Children:</B> The cycle of the child nodes are kept in sync, and the cycle and duration of this node is a blend of the values from both children \n</UL>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_flTimingBlend"
			string m_FriendlyName = "Timing Blend"
			string m_TooltipOverride = ""
			string m_HelpText = "When <b>Timing Control</b> is set to Synchronize Children, this value controls how the duration of the blended result.  A value of 0 means the duration of Child1 is used, 1 means the duration of Child2 is used.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSubtractAnimNode.m_timingBehavior"
			string m_FriendlyName = "Timing Control"
			string m_TooltipOverride = ""
			string m_HelpText = "Choose how the node handles interprets and manages the playback of its children, and how its presents it own timing to its parent.    \n\n<UL>\n<LI> <B>Use Child1:</B> Use the cycle and duration of Child1 as the cycle and duration of this node.  The child nodes are not synchronized.   \n<LI> <B>Use Child2:</B> Use the cycle and duration of Child2 as the cycle and duration of this node.  The child nodes are not synchronized.   \n<LI> <B>Synchronize Children:</B> The cycle of the child nodes are kept in sync, and the cycle and duration of this node is a blend of the values from both children \n</UL>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAddAnimNode.m_timingBehavior"
			string m_FriendlyName = "Timing Control"
			string m_TooltipOverride = ""
			string m_HelpText = "Choose how the node handles interprets and manages the playback of its children, and how its presents it own timing to its parent.    \n\n<UL>\n<LI> <B>Use Child1:</B> Use the cycle and duration of Child1 as the cycle and duration of this node.  The child nodes are not synchronized.   \n<LI> <B>Use Child2:</B> Use the cycle and duration of Child2 as the cycle and duration of this node.  The child nodes are not synchronized.   \n<LI> <B>Synchronize Children:</B> The cycle of the child nodes are kept in sync, and the cycle and duration of this node is a blend of the values from both children \n</UL>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSubtractAnimNode.m_flTimingBlend"
			string m_FriendlyName = "Timing Blend"
			string m_TooltipOverride = ""
			string m_HelpText = "When <b>Timing Control</b> is set to Synchronize Children, this value controls how the duration of the blended result.  A value of 0 means the duration of Child1 is used, 1 means the duration of Child2 is used.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAddAnimNode.m_flTimingBlend"
			string m_FriendlyName = "Timing Blend"
			string m_TooltipOverride = ""
			string m_HelpText = "When <b>Timing Control</b> is set to Synchronize Children, this value controls how the duration of the blended result.  A value of 0 means the duration of Child1 is used, 1 means the duration of Child2 is used.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_target"
			string m_FriendlyName = "Target"
			string m_TooltipOverride = ""
			string m_HelpText = "What location should this node aim at\?"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_attachmentName"
			string m_FriendlyName = "Aim Attachment"
			string m_TooltipOverride = ""
			string m_HelpText = "The Aim Matrix needs to know not just what to aim <em>at</em>, but also where to aim <em>from</em>.  This field lets you pick an attachment that defines what this node considers \"forward\", and the blend of the aim frames will be made based on the direction to the target relative to this attachment.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_blendMode"
			string m_FriendlyName = "Blend Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines how the blend of the frames of the aim animation are applied to the pose from the child node:\n\n<UL>\n<LI><b>Additive:</b> The aim pose is added to the base pose</LI>\n<LI><b>Bone Mask:</b> The aim pose is blended into the base pose using a per-bone mask</LI>\n</UL>\n"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_boneMaskName"
			string m_FriendlyName = "Bone Mask"
			string m_TooltipOverride = ""
			string m_HelpText = "If the <b>Blend Mode</b> is set to <em>Bone Mask</em>, this field indicates which bone mask to use.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CLookAtAnimNode"
			string m_FriendlyName = "LookAt"
			string m_TooltipOverride = ""
			string m_HelpText = "Procedurally rotate a chain of bones to face a certain direction"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLookAtAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLookAtAnimNode.m_damping"
			string m_FriendlyName = "Damping"
			string m_TooltipOverride = ""
			string m_HelpText = "Settings for damping the motion of the blended aim over time"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLookAtAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLookAtAnimNode.m_target"
			string m_FriendlyName = "Target"
			string m_TooltipOverride = ""
			string m_HelpText = "What the lookAt node should aim at.  Can be a direction or a location"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLookAtAnimNode.m_param"
			string m_FriendlyName = "Target Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "If <b>Target</b> is set to <em>Vector Parameter</em>, this field is the anim parameter that is driving the blend.  Note that only Vector parameters are displayed as options"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLookAtAnimNode.m_lookatChainName"
			string m_FriendlyName = "LookAt Chain"
			string m_TooltipOverride = ""
			string m_HelpText = "The chain of bones that will be rotated as part of the lookat.  LookAt Chains are defined in ModelDoc, and referenced by name here"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLookAtAnimNode.m_attachmentName"
			string m_FriendlyName = "Aim Attachment"
			string m_TooltipOverride = ""
			string m_HelpText = "The LookAt op needs to know not just what to aim <em>at</em>, but also where to aim <em>from</em>.  This field lets you pick an attachment that defines what this node considers \"forward\", and the lookat rotation will be made based on the direction to the target relative to this attachment.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLookAtAnimNode.m_flYawLimit"
			string m_FriendlyName = "Yaw Limit"
			string m_TooltipOverride = ""
			string m_HelpText = "The maximum angle that the lookat can turn the aim to the side"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLookAtAnimNode.m_flPitchLimit"
			string m_FriendlyName = "Pitch Limit"
			string m_TooltipOverride = ""
			string m_HelpText = "The maximum angle that the lookat can turn the aim up or down"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLookAtAnimNode.m_bResetBase"
			string m_FriendlyName = "Reset Child"
			string m_TooltipOverride = ""
			string m_HelpText = "If this option is checked, it will reset its child node when it gets reset by its parent.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLookAtAnimNode.m_bUseHysteresis"
			string m_FriendlyName = "Use Hysteresis"
			string m_TooltipOverride = ""
			string m_HelpText = "Turns hysteresis support on and off.\n<P>\nUsing Hysteresis on the lookat makes it act \"sticky\".  Once it has turned to look in a direction it will stay there until the target direction moves more than a certain threshold.  Once it does, it will turn to look in the new direction until it is within an inner threshold.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLookAtAnimNode.m_flHysteresisInnerAngle"
			string m_FriendlyName = "Inner Angle"
			string m_TooltipOverride = ""
			string m_HelpText = "Once the lookat starts turning towards the target direction, it will keep turning towards the target until the target is within this angle.  For best results this should be less than <b>Outer Angle</b>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLookAtAnimNode.m_flHysteresisOuterAngle"
			string m_FriendlyName = "Outer Angle"
			string m_TooltipOverride = ""
			string m_HelpText = "If the lookat is at rest, the target direction must be more than this threshold in order for the lookat to start turning to face the target direction.  To get the best results this should be more than <b>Inner Angle</b>.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CFloatAnimParameter"
			string m_FriendlyName = "Float Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "A parameter than is a number that can have a decimal value.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CFloatAnimParameter.m_name"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the parameter.  This is how the parameter will be referred to in the AnimGraph editor and how the AI will identify this parameter.\n<p>\nNote that changing the name of the parameter will NOT break the graph; the code gives each parameter a unique ID so that their names can be safely changed.  However and AI or gameplay code that sets the parameter will need to be updated.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoolAnimParameter.m_name"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the parameter.  This is how the parameter will be referred to in the AnimGraph editor and how the AI will identify this parameter.\n<p>\nNote that changing the name of the parameter will NOT break the graph; the code gives each parameter a unique ID so that their names can be safely changed.  However and AI or gameplay code that sets the parameter will need to be updated.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CEnumAnimParameter.m_name"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the parameter.  This is how the parameter will be referred to in the AnimGraph editor and how the AI will identify this parameter.\n<p>\nNote that changing the name of the parameter will NOT break the graph; the code gives each parameter a unique ID so that their names can be safely changed.  However and AI or gameplay code that sets the parameter will need to be updated.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CIntAnimParameter.m_name"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the parameter.  This is how the parameter will be referred to in the AnimGraph editor and how the AI will identify this parameter.\n<p>\nNote that changing the name of the parameter will NOT break the graph; the code gives each parameter a unique ID so that their names can be safely changed.  However and AI or gameplay code that sets the parameter will need to be updated.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CVectorAnimParameter.m_name"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the parameter.  This is how the parameter will be referred to in the AnimGraph editor and how the AI will identify this parameter.\n<p>\nNote that changing the name of the parameter will NOT break the graph; the code gives each parameter a unique ID so that their names can be safely changed.  However and AI or gameplay code that sets the parameter will need to be updated.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CFloatAnimParameter.m_fDefaultValue"
			string m_FriendlyName = "Default Value"
			string m_TooltipOverride = ""
			string m_HelpText = "The value the parameter will start with when it is loaded in game.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoolAnimParameter.m_bDefaultValue"
			string m_FriendlyName = "Default Value"
			string m_TooltipOverride = ""
			string m_HelpText = "The value the parameter will start with when it is loaded in game.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CEnumAnimParameter.m_defaultValue"
			string m_FriendlyName = "Default Value"
			string m_TooltipOverride = ""
			string m_HelpText = "The value the parameter will start with when it is loaded in game.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CIntAnimParameter.m_defaultValue"
			string m_FriendlyName = "Default Value"
			string m_TooltipOverride = ""
			string m_HelpText = "The value the parameter will start with when it is loaded in game.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CVectorAnimParameter.m_defaultValue"
			string m_FriendlyName = "Default Value"
			string m_TooltipOverride = ""
			string m_HelpText = "The value the parameter will start with when it is loaded in game.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CBoolAnimParameter"
			string m_FriendlyName = "Bool Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "A parameter than can either be true or false"
		},
		CHelpEntry
		{
			string m_Id = "Element.CEnumAnimParameter"
			string m_FriendlyName = "Enum Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "A parameter than can only be one of a small set of values.  These values are numbers, but for convenience they are associated with a name.  For example, a \"weapon\" enum parameter can be 0 (Knife), 1 (Pistol), or 2 (Rifle)"
		},
		CHelpEntry
		{
			string m_Id = "Element.CIntAnimParameter"
			string m_FriendlyName = "Int Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "A parameter with a non-decimal value"
		},
		CHelpEntry
		{
			string m_Id = "Element.CVectorAnimParameter"
			string m_FriendlyName = "Vector Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "A parameter with 3 floating-point values.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CFloatAnimParameter.m_fMinValue"
			string m_FriendlyName = "Min Value"
			string m_TooltipOverride = ""
			string m_HelpText = "The smallest value that this parameter is allowed to have.  If gameplay code tried to set it below this, it will be clamped to this value.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CFloatAnimParameter.m_fMaxValue"
			string m_FriendlyName = "Max Value"
			string m_TooltipOverride = ""
			string m_HelpText = "The largest value that this parameter is allowed to have.  If gameplay code tried to set it above this, it will be clamped to this value.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CIntAnimParameter.m_maxValue"
			string m_FriendlyName = "Max Value"
			string m_TooltipOverride = ""
			string m_HelpText = "The smallest value that this parameter is allowed to have.  If gameplay code tried to set it below this, it will be clamped to this value.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CIntAnimParameter.m_minValue"
			string m_FriendlyName = "Min Value"
			string m_TooltipOverride = ""
			string m_HelpText = "The smallest value that this parameter is allowed to have.  If gameplay code tried to set it below this, it will be clamped to this value.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CFloatAnimParameter.m_bInterpolate"
			string m_FriendlyName = "Interpolate"
			string m_TooltipOverride = ""
			string m_HelpText = "If the <b>Network</b> option is set, this setting indicates that the value should be smoothly interpolated on the client.\n<P>\nThis is necessary because the server usually ticks much slower than the framerate of the client, which can result in stuttery looking motion if interpolation is not used.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CFloatAnimParameter.m_previewButton"
			string m_FriendlyName = "Preview Button"
			string m_TooltipOverride = ""
			string m_HelpText = "If a gamepad or controller is connected, this lets you bind this parameter to a button when using the in-editor preview.  \n<p>\nWhen the button is pressed the parameter is set to <b>Max Value</b>.  When its released its set to <b>Default Value</b>.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoolAnimParameter.m_previewButton"
			string m_FriendlyName = "Preview Button"
			string m_TooltipOverride = ""
			string m_HelpText = "If a gamepad or controller is connected, this lets you bind this parameter to a button when using the in-editor preview.  \n<p>\nWhen the button is pressed the parameter is set to <b>Max Value</b>.  When its released its set to <b>Default Value</b>.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CEnumAnimParameter.m_previewButton"
			string m_FriendlyName = "Preview Button"
			string m_TooltipOverride = ""
			string m_HelpText = "If a gamepad or controller is connected, this lets you bind this parameter to a button when using the in-editor preview.  \n<p>\nWhen the button is pressed the parameter is set to <b>Max Value</b>.  When its released its set to <b>Default Value</b>.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CIntAnimParameter.m_previewButton"
			string m_FriendlyName = "Preview Button"
			string m_TooltipOverride = ""
			string m_HelpText = "If a gamepad or controller is connected, this lets you bind this parameter to a button when using the in-editor preview.  \n<p>\nWhen the button is pressed the parameter is set to <b>Max Value</b>.  When its released its set to <b>Default Value</b>.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CVectorAnimParameter.m_previewButton"
			string m_FriendlyName = "Preview Button"
			string m_TooltipOverride = ""
			string m_HelpText = "If a gamepad or controller is connected, this lets you bind this parameter to a button when using the in-editor preview.  \n<p>\nWhen the button is pressed the parameter is set to <b>Max Value</b>.  When its released its set to <b>Default Value</b>.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CFloatAnimParameter.m_bNetwork"
			string m_FriendlyName = "Network"
			string m_TooltipOverride = ""
			string m_HelpText = "Set whether or not the value of this parameter should be networked from the server to the client.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoolAnimParameter.m_bNetwork"
			string m_FriendlyName = "Network"
			string m_TooltipOverride = ""
			string m_HelpText = "Set whether or not the value of this parameter should be networked from the server to the client.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CEnumAnimParameter.m_bNetwork"
			string m_FriendlyName = "Network"
			string m_TooltipOverride = ""
			string m_HelpText = "Set whether or not the value of this parameter should be networked from the server to the client.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CIntAnimParameter.m_bNetwork"
			string m_FriendlyName = "Network"
			string m_TooltipOverride = ""
			string m_HelpText = "Set whether or not the value of this parameter should be networked from the server to the client.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CVectorAnimParameter.m_bNetwork"
			string m_FriendlyName = "Network"
			string m_TooltipOverride = ""
			string m_HelpText = "Set whether or not the value of this parameter should be networked from the server to the client.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CFloatAnimParameter.m_bAutoReset"
			string m_FriendlyName = "Auto Reset"
			string m_TooltipOverride = ""
			string m_HelpText = "When checked, the parameter will get set back to its <b>Default Value</b> at the end of each tick.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoolAnimParameter.m_bAutoReset"
			string m_FriendlyName = "Auto Reset"
			string m_TooltipOverride = ""
			string m_HelpText = "When checked, the parameter will get set back to its <b>Default Value</b> at the end of each tick.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CEnumAnimParameter.m_bAutoReset"
			string m_FriendlyName = "Auto Reset"
			string m_TooltipOverride = ""
			string m_HelpText = "When checked, the parameter will get set back to its <b>Default Value</b> at the end of each tick.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CIntAnimParameter.m_bAutoReset"
			string m_FriendlyName = "Auto Reset"
			string m_TooltipOverride = ""
			string m_HelpText = "When checked, the parameter will get set back to its <b>Default Value</b> at the end of each tick.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CVectorAnimParameter.m_bAutoReset"
			string m_FriendlyName = "Auto Reset"
			string m_TooltipOverride = ""
			string m_HelpText = "When checked, the parameter will get set back to its <b>Default Value</b> at the end of each tick.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CEnumAnimParameter.m_enumOptions"
			string m_FriendlyName = "Values"
			string m_TooltipOverride = ""
			string m_HelpText = "The list of values that this parameter can be, and the friendly names associated with them.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CVectorAnimParameter.m_bInterpolate"
			string m_FriendlyName = "Interpolate"
			string m_TooltipOverride = ""
			string m_HelpText = "If the <b>Network</b> option is set, this setting indicates that the value should be smoothly interpolated on the client.\n<P>\nThis is necessary because the server usually ticks much slower than the framerate of the client, which can result in stuttery looking motion if interpolation is not used.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CStringAnimTag"
			string m_FriendlyName = "String Tag"
			string m_TooltipOverride = ""
			string m_HelpText = "A simple tag that contains a string for its payload.  Can be used to notify gameplay code about events in the graph, but in practice tends to be used mostly for communication within the graph itself"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CStringAnimTag.m_name"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the tag used throughout the editor UI.  This is NOT normally used by gameplay code"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSequenceFinishedAnimTag.m_name"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the tag used throughout the editor UI.  This is <b>NOT</b> normally used by gameplay code.  \n<p>\nChanging the name of the tag will not break graph logic.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTaskStatusAnimTag.m_name"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the tag used throughout the editor UI.  This is <b>NOT</b> normally used by gameplay code.  \n<p>\nChanging the name of the tag will not break graph logic.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CPostGraphIKTag.m_name"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the tag used throughout the editor UI.  This is <b>NOT</b> normally used by gameplay code.  \n<p>\nChanging the name of the tag will not break graph logic.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CStringAnimTag.m_value"
			string m_FriendlyName = "Value"
			string m_TooltipOverride = ""
			string m_HelpText = "The string value to pass to gameplay code when this event fires. "
		},
		CHelpEntry
		{
			string m_Id = "Element.CSequenceFinishedAnimTag"
			string m_FriendlyName = "Sequence Finished Tag"
			string m_TooltipOverride = ""
			string m_HelpText = "This tag is for backwards compatibility with the previous animation system. When it fires, it tells the gameplay code that a sequenece has \'finished\'.  \n<p>\nTry to avoid using this tag type except when porting old characters to use the animgraph"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSequenceFinishedAnimTag.m_sequenceName"
			string m_FriendlyName = "Sequence"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the sequence that finished"
		},
		CHelpEntry
		{
			string m_Id = "Element.CTaskStatusAnimTag"
			string m_FriendlyName = "Task Status Tag"
			string m_TooltipOverride = ""
			string m_HelpText = "This is the primary tag type used to communicate with AI.  Use it to notify the AI when tasks that is has requested the graph to perform are in progress and/or complete.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTaskStatusAnimTag.m_identifierString"
			string m_FriendlyName = "Identifier"
			string m_TooltipOverride = ""
			string m_HelpText = "A text string that the AI can use to determine which task it has received a tag event about.  \n<p>\nThe string value is hashed to a number that makes checking the identifier faster for the AI code.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CPostGraphIKTag"
			string m_FriendlyName = "Post Graph IK Tag"
			string m_TooltipOverride = ""
			string m_HelpText = "Tells the foot IK, which is applied to the skeleton after the graph update, when to turn on and off.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CPostGraphIKTag.m_flBlendAmount"
			string m_FriendlyName = "Blend Amount"
			string m_TooltipOverride = ""
			string m_HelpText = "What the blend weight between the animated position and the IK\'d position should be.  \n<p>\n0 = 100% Animated <br>\n1 = 100% IK\n"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CLookAtAnimNode.m_weightParam"
			string m_FriendlyName = "Weight Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "<b>(Optional)</b>\n<p>\nSet a float parameter to control the blend weight of the lookat"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CClothSettingsAnimTag.m_name"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the tag used throughout the editor UI.  This is NOT normally used by gameplay code"
		},
		CHelpEntry
		{
			string m_Id = "Element.CClothSettingsAnimTag"
			string m_FriendlyName = "Cloth Settings Tag"
			string m_TooltipOverride = ""
			string m_HelpText = "Tells the cloth system to change its settings"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_children"
			string m_FriendlyName = "Options"
			string m_TooltipOverride = ""
			string m_HelpText = "List of child nodes to choose from, and their relative probability weights"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceNodeChild.m_name"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "Name of this Option"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceNodeChild.m_weight"
			string m_FriendlyName = "Weight"
			string m_TooltipOverride = ""
			string m_HelpText = "The probability weight that this option will get selected.  Weights are NOT percentage based; they are relative to the sum of all the weights for all the options.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_children"
			string m_FriendlyName = "Blend Items"
			string m_TooltipOverride = ""
			string m_HelpText = "List of the items to blend between"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendNodeChild.m_name"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The friendly name of this blend item"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendNodeChild.m_blendValue"
			string m_FriendlyName = "Blend Value"
			string m_TooltipOverride = ""
			string m_HelpText = "The value at which the node should use 100% of this item as the result of its blend"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_blendKeyType"
			string m_FriendlyName = "Blend Key Values"
			string m_TooltipOverride = ""
			string m_HelpText = "Each child of this node has a \"blend key\" value associated with it that is used to create the blend.  This setting determine where those values come from.  The user can manually specify the blend values in the Blend Items setting, or they can be derived from the properties of the children themselves.\n\n<UL>\n<LI><B>User Defined Values: </B>  The user-defined values entered in the <I>Blend Value</I> field of each entry in the <I>Blend Items</I> list are used as the key values for each child </LI>\n\n<LI> <B>Velocity: </B>  The speed of each child node is used as its key value.  NOTE: when this option is used, it is assumed that Blend Source is also a speed, and the blended animation will be played back at a speed that matches the value of the <I>Blend Source</I>, even if it is outside the range of the child animations. </LI>\n\n<LI> <B> Distance: </B>  The total distance that each child node moves over the course of the entire animation is used as the blend key value for each child node.  \n</LI>\n\n</UL>\n\n<P/>\nNote that the user-entered blend values are only used when the <B>Blend Key Values</B> setting is <I>User Defined Values</I>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAddAnimNode.m_bApplyChannelsSeparately"
			string m_FriendlyName = "Treat Translation Separately"
			string m_TooltipOverride = ""
			string m_HelpText = "In the Source 1 anim system, translation and rotation were added independently of each other.  Enabling this option preserves the previous functionality.  Most of the time you won\'t notice a difference because most additive animations are rotation only.  But be aware that enabling this option means that additive animations may not appear the same in game as they do in Maya"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSubtractAnimNode.m_bApplyChannelsSeparately"
			string m_FriendlyName = "Treat Translation Separately"
			string m_TooltipOverride = ""
			string m_HelpText = "In the Source 1 anim system, translation and rotation were added independently of each other.  Enabling this option preserves the previous functionality.  Most of the time you won\'t notice a difference because most additive animations are rotation only.  But be aware that enabling this option means that additive animations may not appear the same in game as they do in Maya"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_flTurnToFaceOffset"
			string m_FriendlyName = "Turn to Face Offset"
			string m_TooltipOverride = ""
			string m_HelpText = "Apply an offset angle to the Turn to Face direction, so that the character can, for example, face away from the target direction"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDirectPlaybackAnimNode.m_bFinishEarly"
			string m_FriendlyName = "Finish Early"
			string m_TooltipOverride = ""
			string m_HelpText = "Normally when playing several scripted sequences in a row, the next sequence wont start until the current one has completely finished.  This can lead to stutters in the animation as the old sequence freezes on its last frame while the new sequence is blending in.  \n<BR/>\n<BR/>\n\nEnabling this option will cause all scripted sequences on this character to be considered \"finished\" early, so that they will still be animating while they are blending out.  The Fade Out on the sequence is used to determine how early the sequence should signal that its finished.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CPathAnimMotor"
			string m_FriendlyName = "Path Motor"
			string m_TooltipOverride = ""
			string m_HelpText = "Motor that drives the character to follow a path.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CPathAnimMotor.m_name"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the motor"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CPathAnimMotor.m_bLockToPath"
			string m_FriendlyName = "Lock To Path"
			string m_TooltipOverride = ""
			string m_HelpText = "When enables, the motor will modify the the graph\'s root motion so that the character will stay on the path.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CPathAnimMotor.m_bPreventGoalOvershoot"
			string m_FriendlyName = "Prevent Goal Overshoot"
			string m_TooltipOverride = ""
			string m_HelpText = "When enabled, if the graph\'s root motion would make the character move farther than the distance to the goal, it will modify the root motion to instead move it to the goal.  \n<BR/>\n<BR/>\nSince the path is usually gone before the character gets all the way to the goal, the motor remembers where the last goal position was and will use that.  Note that this will limit ambient motion when there is no path.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CDampedPathAnimMotor"
			string m_FriendlyName = "Damped Path Motor"
			string m_TooltipOverride = ""
			string m_HelpText = "Motor that drives the character along a path, calculating acceleration and smoothly adjusting the speed to anticipate stops and sharp turns.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDampedPathAnimMotor.m_name"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the motor"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDampedPathAnimMotor.m_bLockToPath"
			string m_FriendlyName = "Lock To Path"
			string m_TooltipOverride = ""
			string m_HelpText = "When enables, the motor will modify the the graph\'s root motion so that the character will stay on the path.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDampedPathAnimMotor.m_bPreventGoalOvershoot"
			string m_FriendlyName = "Prevent Goal Overshoot"
			string m_TooltipOverride = ""
			string m_HelpText = "When enabled, if the graph\'s root motion would make the character move farther than the distance to the goal, it will modify the root motion to instead move it to the goal.  \n<BR/>\n<BR/>\nSince the path is usually gone before the character gets all the way to the goal, the motor remembers where the last goal position was and will use that.  Note that this will limit ambient motion when there is no path.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDampedPathAnimMotor.m_flAnticipationTime"
			string m_FriendlyName = "Anticipation Time"
			string m_TooltipOverride = ""
			string m_HelpText = "How far ahead the motor should look to anticipate changes in the character\'s speed.  This determines how long it takes for the character to go from a standstill to its top speed, and how aggressively it tries to maintain speed in turns.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDampedPathAnimMotor.m_flSpringConstant"
			string m_FriendlyName = "Spring Constant"
			string m_TooltipOverride = ""
			string m_HelpText = "Determines how aggressively the character will stop.  Higher values with make the character use more force over a shorter diestance to stop"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDampedPathAnimMotor.m_flMinSpringTension"
			string m_FriendlyName = "Min Tension"
			string m_TooltipOverride = ""
			string m_HelpText = "When stopping, the character will slow down as it approaches the goal.  Sometimes it can slow down too much and seem to take forever to stop.  Increasing this value will inrease the minumum speed that the character will use when coming to a stop.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDampedPathAnimMotor.m_flMaxSpringTension"
			string m_FriendlyName = "Max Tension"
			string m_TooltipOverride = ""
			string m_HelpText = "When stopping, forces are applied to slow the character down.  If the Spring Constant is high, the forces can be quite large.  This value acts as a clamp on how much force is applied to make the character slow down when stopping.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_blendSpace"
			string m_FriendlyName = "Blend Space"
			string m_TooltipOverride = ""
			string m_HelpText = "The coordinate system that the bone transforms should be blended in\n\n<UL>\n<LI> <b>Parent Space (Default):</b> Relative to each bones\' parent </LI>\n<LI> <b>Model Space:</b> Relative to the entity\'s model.  Think world space if the entity was standing at the world origin </LI>\n<LI> <b>Model Space, Rotation Only:</b> Same as model space, but only the rotation is blended.  This prevents the mesh from deforming unnaturally due to unwanted bone translation.  </LI>\n</UL>\n"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_bUseBlendScale"
			string m_FriendlyName = "Use Blend Source"
			string m_TooltipOverride = ""
			string m_HelpText = "When enabled, a value will be used to scale the values of the bone mask.  A value of 0 means nothing is blended in (ie: Child 1 is used unmodified), and a value of 1 means that 100% of the bone mask is used to blend Child 2 onto Child 1"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_blendValueSource"
			string m_FriendlyName = "Blend Source"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the value used to drive the bone mask blend comes from"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBoneMaskAnimNode.m_blendParameter"
			string m_FriendlyName = "Blend Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "If the <b>Blend Source</b> is set to <em>Parameter</em>, this is the parameter that is used to drive the blend"
		},
		CHelpEntry
		{
			string m_Id = "Element.CFollowAttachmentAnimNode"
			string m_FriendlyName = "Follow Attachment Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Procedurally move a bone to match to position and/or rotation of a target Attachment"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CFollowAttachmentAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CFollowAttachmentAnimNode.m_boneName"
			string m_FriendlyName = "Bone"
			string m_TooltipOverride = ""
			string m_HelpText = "The bone to modify"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CFollowAttachmentAnimNode.m_attachmentName"
			string m_FriendlyName = "Target Attachment"
			string m_TooltipOverride = ""
			string m_HelpText = "The attachment that the selected bone should follow"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CFollowAttachmentAnimNode.m_bMatchTranslation"
			string m_FriendlyName = "Match Translation"
			string m_TooltipOverride = ""
			string m_HelpText = "When selected, will cause the position of the selected bone to match the position of the attachment"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CFollowAttachmentAnimNode.m_bMatchRotation"
			string m_FriendlyName = "Match Rotation"
			string m_TooltipOverride = ""
			string m_HelpText = "When selected, will cause the rotation of the selected bone to match the rotation of the attachment"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CFollowAttachmentAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDampedPathAnimMotor.m_anticipationPosParam"
			string m_FriendlyName = "Anticipation Position Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "If set, the motor will place the current location on the path that it is anticipating into this parameter"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CDampedPathAnimMotor.m_anticipationHeadingParam"
			string m_FriendlyName = "Anticipation Heading Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "If set, the motor will place the heading to the current location on the path that it is anticipating into this parameter"
		},
		CHelpEntry
		{
			string m_Id = "Element.CIKLockTargetGeneratorAnimNode"
			string m_FriendlyName = "IK Lock Target Generator"
			string m_TooltipOverride = ""
			string m_HelpText = "This node will generate IK locks based on the locks specified in modeldoc.  Without this node, the feet may slide if the runtime moves/blends the entiy differently than the animation expects."
		},
		CHelpEntry
		{
			string m_Id = "Element.CIKLockAnimNode"
			string m_FriendlyName = "(Conditionally) Lock IK "
			string m_TooltipOverride = "Lock the end effector whenever the markup from modeldoc says so."
			string m_HelpText = "<p>\nAnimations can be marked up with IKLock ranges to indicate when an end effector should be considered \"locked\" to a position in the world.\n</p>\n<p>\nThis node reads those locks as a 0-1 value (which are blended into bones) and locks/unlocks them based on an internal state machine, and breaks them based on certain heuristics.\n</p>\n\n<h2>Details</h2>\n\n<h3>State Machine</h3>\n\n<h4>Unlocked (default)</h4>\n\n<p>\nWhile unlocked, the end effector isn\'t touched.  The lock is read to see if it ever crosses the threshold (0.9 at the time of this writing) and records the lock position in world space, and switches to the locked state.\n</p>\n\n<h4>Locked</h4>\n<p>\nWhen locked, the end effector target\'s position is set to the location specified by the lock that was initiated.  As the lock fades (it\'s influence heads towards zero), the lock is blended with the position/orientation that would\'ve resulted if unlocked, trying to blend us back to normal.  Upon reaching the release threshold (less than 0.1), we revert to the unlocked state.\n</p>\n\n<h3>Breaking Locks</h3>\n\nThere are various heuristics for breaking a lock that have yet to be ported from skeleton instance that will be brough forward shortly - leg overextension, distance to target, etc."
		},
		CHelpEntry
		{
			string m_Id = "Element.CSkeletalInputAnimNode"
			string m_FriendlyName = "SteamVR Skeletal Input"
			string m_TooltipOverride = ""
			string m_HelpText = "Node to read the live skeletal animation data from SteamVR and retarget it to the current skeleton.  Provides options to pass to SteamVR to control how the data stream is delivered"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSkeletalInputAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSkeletalInputAnimNode.m_hand"
			string m_FriendlyName = "Hand"
			string m_TooltipOverride = ""
			string m_HelpText = "Choose which skeletal data stream to read from: either the right hand or the left hand.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSkeletalInputAnimNode.m_motionRange"
			string m_FriendlyName = "Motion Range"
			string m_TooltipOverride = ""
			string m_HelpText = "Choose whether SteamVR delivers the hand animation with a range of motion that matches the user\'s hand a closely as possible (ie: with the controller in the hand), or to convert to a full hand range of motion (as if the user was not holding a controller).  Note for some input devices, these options will be the same"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSkeletalInputAnimNode.m_bAdditive"
			string m_FriendlyName = "Additive"
			string m_TooltipOverride = ""
			string m_HelpText = "Choose whether the skeletal data should be delivered as delta offsets from a common \"grip limit\" pose that can be added to other animations.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSkeletalInputAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_bLockWhenWaning"
			string m_FriendlyName = "Lock Blend When Waning"
			string m_TooltipOverride = ""
			string m_HelpText = "When true, the blend value will not get update while this node is being blended out of (aka: \"Waning\")"
		},
		CHelpEntry
		{
			string m_Id = "Element.CSelectorAnimNode"
			string m_FriendlyName = "Selector Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Selects between two or more child nodes based on either a bool parameter or an enum parameter.  Provides support for blending between children when the \"current\" one changes, and for activating tags based on the \"current\" child"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSelectorAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node and the name of the parameter used to control it as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSelectorAnimNode.m_selectionSource"
			string m_FriendlyName = "Selection Source"
			string m_TooltipOverride = ""
			string m_HelpText = "Controls whether the Selector is controlled by a Boolean parameter or an Enum parameter.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSelectorAnimNode.m_boolParamID"
			string m_FriendlyName = "Bool Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "If <b>Selection Source</b> is <em>Bool</em>, this field defines which boolean parameter is used to control the Selector.  Otherwise it is not used.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSelectorAnimNode.m_enumParamID"
			string m_FriendlyName = "Enum Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "If <b>Selection Source</b> is <em>Enum</em>, this field defines which enum parameter is used to control the Selector.  Otherwise it is not used.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSelectorAnimNode.m_blendDuration"
			string m_FriendlyName = "Blend Duration"
			string m_TooltipOverride = ""
			string m_HelpText = "When the current selection changes, this field determines how long it takes to blend from the previous selection to the new one.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSelectorAnimNode.m_tagBehavior"
			string m_FriendlyName = "Tag Behavior"
			string m_TooltipOverride = ""
			string m_HelpText = "Sets the logic use to determine when the tag associated with an option is active.  \n\n<UL>\n<LI> <b>Active While Current:</b> The current selection\'s tag is active the entire time it is the current selection </LI>\n<LI> <b>Off When Finished:</b> The current selection\'s tag is active until the node associated with it indicates that it is \"finished\"  </LI>\n<LI> <b>Off Before Finished:</b> The current selection\'s tag is active up until <em>Blend Duration</em> seconds before the node associated with it is expected to be finished.  </LI>\n</UL>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSelectorAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSelectorAnimNode.m_bResetOnChange"
			string m_FriendlyName = "Reset On Change"
			string m_TooltipOverride = ""
			string m_HelpText = "When the current selection changes, reset the new one"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSelectorAnimNode.m_bSyncCyclesOnChange"
			string m_FriendlyName = "Start new option at same cycle"
			string m_TooltipOverride = ""
			string m_HelpText = "If <b>Reset On Change</b> is true, this setting will apply the cycle of the previous selection to the new one"
		},
		CHelpEntry
		{
			string m_Id = "Element.CHitReactAnimNode"
			string m_FriendlyName = "Procedural Hit Reacts"
			string m_TooltipOverride = ""
			string m_HelpText = "Applies a procedurally-generated hit reaction on top of a given pose.  Takes hit location, direction, and force into account.\n"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CHitReactAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CHitReactAnimNode.m_triggerParam"
			string m_FriendlyName = "Trigger Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "The bool parameter to use to trigger a hit reaction.  Should be set to auto-reset and NOT networked"
		},
		CHelpEntry
		{
			string m_Id = "Element.CBlend2DAnimNode"
			string m_FriendlyName = "Blend 2D"
			string m_TooltipOverride = ""
			string m_HelpText = "Blends between a set of animations based on the values of two variables.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlend2DAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node. Shown in the header bar of the node in the graph editor. If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name. "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlend2DAnimNode.m_items"
			string m_FriendlyName = "Blend Items"
			string m_TooltipOverride = ""
			string m_HelpText = "List of animations to blend between and the 2D coordinates that they represent in the blend space"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlend2DAnimNode.m_blendSourceX"
			string m_FriendlyName = "Blend Source"
			string m_TooltipOverride = ""
			string m_HelpText = "The value controlling the horizonatal blend axis"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlend2DAnimNode.m_paramX"
			string m_FriendlyName = "Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "If <b>Blend Source</b> is set to Parameter, this field is the animgraph parameter to use to control the blend on this axis"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlend2DAnimNode.m_paramY"
			string m_FriendlyName = "Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "If <b>Blend Source</b> is set to Parameter, this field is the animgraph parameter to use to control the blend on this axis"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlend2DAnimNode.m_blendSourceY"
			string m_FriendlyName = "Blend Source"
			string m_TooltipOverride = ""
			string m_HelpText = "The value controlling the vertical blend axis"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlend2DAnimNode.m_eBlendNode"
			string m_FriendlyName = "Blend Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Choose between methods used to calculate the blend weights for the animations based on the current 2D blend value.  \n\n<UL>\n<LI> <b>General</b>: A context-independent 2D blending technique.  Good for many situations </LI>\n<LI> <b>Directional</b>: If the blend values are directions, using this method can produce more accurate results </LI>\n</UL>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlend2DAnimNode.m_bLoop"
			string m_FriendlyName = "Loop"
			string m_TooltipOverride = ""
			string m_HelpText = "Toggle whether or not the animations should loop or stop at the end"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlend2DAnimNode.m_bLockBlendOnReset"
			string m_FriendlyName = "Lock Blend on Reset"
			string m_TooltipOverride = ""
			string m_HelpText = "When false, the blend is refreshed every frame.\n<br/>\n<br/>\nWhen true, the blend is only refresh when the node is reset.  The cycle advances normally, however.  This is so that you can keep the blend value the same for the duration of the playback of an animation, even if the input value changes.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlend2DAnimNode.m_playbackSpeed"
			string m_FriendlyName = "Playback Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "Adjusts the speed at which the animations play.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlend2DAnimNode.m_damping"
			string m_FriendlyName = "Damping"
			string m_TooltipOverride = ""
			string m_HelpText = "Controls how the output of this node is blended over time"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlend2DAnimNode.m_networkMode"
			string m_FriendlyName = "Network Mode"
			string m_TooltipOverride = ""
			string m_HelpText = "Defines where the logic for this graph node is evaluated:\n\n<UL>\n<LI> <b>Server Authoritative: </b> The logic for this node runs on the server, and the results are networked down to the client\n<LI> <b>Client Simulate: </b> The logic for this node runs on the client, and its state is not networked\n</UL>\n\n<p/>\n\n<em>Note: When a node is set to <b>Client Simulate</b> all of its children are forced to also be Client Simulate, regardless of what their Network Mode setting is </em>"
		},
		CHelpEntry
		{
			string m_Id = "Element.CGroundIKSolveAnimNode"
			string m_FriendlyName = "Name for the node."
			string m_TooltipOverride = ""
			string m_HelpText = ""
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CGroundIKSolveAnimNode.m_IkChains"
			string m_FriendlyName = "The IK chains to apply ground IK to."
			string m_TooltipOverride = ""
			string m_HelpText = ""
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CGroundIKSolveAnimNode.m_TiltSource"
			string m_FriendlyName = "Tilt Vector Source"
			string m_TooltipOverride = ""
			string m_HelpText = "<p>Ground IK can tilt your model for you, as well as compensate the amount the foot is pushed out by, based upon the ground vector.\n</p>\n<p>\nThe three settings currently are:\n</p>\n<h3>\n- None\n</h3>\n<p>\nNo tilting will be applied: all ground adjustments will be done as if on flat ground.\n</p>\n<h3>\n- Movement Manager Slope\n</h3>\n<p>\nUse the tilt vector from the movement manager.  This will play nicely with lean matrices and other graph citizens.\n</p>\n<h3>\n- IK\n</h3>\n<p>\nThis uses the traces from IK to determine a ground vector.  This is legacy or for non-animgraph, and will be deprecated soon.\n</p>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CGroundIKSolveAnimNode.m_bApplyLocks"
			string m_FriendlyName = "Apply Locks"
			string m_TooltipOverride = ""
			string m_HelpText = "Toggle whether the IK locks on the animation are used to determine whether the foot stays still or not."
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CGroundIKSolveAnimNode.m_bEnabled"
			string m_FriendlyName = "Enabled"
			string m_TooltipOverride = ""
			string m_HelpText = "Whether this node is enabled or not."
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CGroundIKSolveAnimNode.m_TargetBlendParameter"
			string m_FriendlyName = "Target Blend Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "<p>\nThe ground node will blend it\'s target between the animations default output and the ground IK target based on this float parameter, if present.\n</p>\n\n<p>This was needed to get anim events triggered from scripted sequences to be able to disable ground IK.</p>\n\n<p>See  <a href=\"https://confluence.valve.org/display/source2/Modeldoc+Setup#ModeldocSetup-AE_IK_SET_MASTER_BLEND_AMOUNT\">Modeldoc Setup</a> for more details.\n\n</p>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CGroundIKSolveAnimNode.m_DebugDrawBoneTypes"
			string m_FriendlyName = "Debug Bone Types to Draw"
			string m_TooltipOverride = ""
			string m_HelpText = "A list of bone \'types\' that we can debug draw."
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CGroundIKSolveAnimNode.m_bDebugDrawLockValues"
			string m_FriendlyName = "Debug Draw Lock Values"
			string m_TooltipOverride = ""
			string m_HelpText = "Draw the raw IK lock values as vertical lines coming off the end effector.\n\nWhen a lock reaches 1, a lock is placed.  As it fades towards 0, we lerp from the lock to the current target.  Once it gets to zero, the lock terminates until such time as it gets to 1 again."
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CGroundIKSolveAnimNode.m_DebugDrawLockValuesColor"
			string m_FriendlyName = "Debug Lock Values Color"
			string m_TooltipOverride = ""
			string m_HelpText = "The color to draw lock values at.  Useful if you\'re trying to track down different points in the graph that might be messing with the value."
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CGroundIKSolveAnimNode.m_bDebugDrawBefore"
			string m_FriendlyName = "Debug Draw Before"
			string m_TooltipOverride = ""
			string m_HelpText = "Draw the bones described in \"Bone Types to Draw\" before ground IK is applied."
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CGroundIKSolveAnimNode.m_DebugDrawBeforeColor"
			string m_FriendlyName = "Debug Draw Before Color"
			string m_TooltipOverride = ""
			string m_HelpText = "The color to draw the bones before ground IK is applied."
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CGroundIKSolveAnimNode.m_bDebugDrawAfter"
			string m_FriendlyName = "Debug Draw After"
			string m_TooltipOverride = ""
			string m_HelpText = "Whether we should debug draw the set of bones after ground IK is applied."
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CGroundIKSolveAnimNode.m_DebugDrawAfterColor"
			string m_FriendlyName = "Debug Draw After Color"
			string m_TooltipOverride = ""
			string m_HelpText = "The color to draw the selected bones, after ground IK has been applied."
		}
	]
}