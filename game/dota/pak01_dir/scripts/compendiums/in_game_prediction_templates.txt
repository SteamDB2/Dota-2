"templatefile loaded by Server"
{
	"denies_count"
	{
		"challengetype"		"1"
		"events"
		{
			"matching_type"			"linear_series"
			"query"
			{
				"find_deny"
				{
					"event"			"death"
					"attacker"		"!hero"
					"target_team"	"!team"
					"storage"
					{
						"1"
						{
							"aggregator"	"increment"
						}
					}	
				}
			}
			"post_tests"
			{
				"test_denies_count"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<denies>"
				}
			}
			"progress_stored_in"		"1"
			"clear_storage_per_query"	"0"
		}
		"variables"
		{
			"<denies>"
			{
				"format"	"int"
				"index"		"0"
			}
		}
	}

	"first_multikill"
	{
		"challengetype"		"2"
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"find_multi_kill"
				{			
					"event"			"multikill"
					"playerid"		"!playerid"
					"storage"
					{
						"1"
						{
							"key"			"value"
							"aggregator"	"max"
						}
					}
				}
			}

			"post_tests"
			{
				"test_value"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<multi_kill_type>"
				}
			}

			"clear_storage_per_query"	"0"
			"progress_stored_in"		"1"
		}

		"variables"
		{
			"<multi_kill_type>"
			{
				"format"	"int"
				"index"		"0"
			}
		}
	}

	"killing_spree"
	{
		"challengetype"		"3"
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"find_killing_spree"
				{			
					"event"			"killstreak"
					"playerid"		"!playerid"
					"storage"
					{
						"1"
						{
							"key"			"value"
							"aggregator"	"max"	
						}
					}
				}
			}

			"clear_storage_per_query"	"0"
			"progress_stored_in"		"1"
			"post_tests"
			{
				"test_value"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<killing_sprees>"
				}
			}
		}

		"variables"
		{
			"<killing_sprees>"
			{
				"format"	"int"
				"index"		"0"
			}
		}
	}

	"kill_count"
	{
		"challengetype"		"4"
		"events"
		{
			"matching_type"		"linear_series"
			"success_gametime"		"<game_time>"
			"never_match_queries" "1"
			"query"
			{
				"find_kill"
				{
					"event"			"playerstats"
					"playerid"		"!playerid"
					"storage"
					{
						"1"			"kills"
					}
				}
			}

			"clear_storage_per_query"	"0"
			"progress_stored_in"		"1"
		}

		"variables"
		{
			"<game_time>"
			{
				"format"	"gametime"
				"index"		"0"
			}
		}
	}

	"kill_count_by_time"
	{
		"challengetype"		"65"
		"events"
		{
			"matching_type"		"linear_series"
			"success_gametime"		"<game_time>"
			"query"
			{
				"find_kill"
				{
					"event"			"playerstats"
					"playerid"		"!playerid"
					"storage"
					{
						"1"			"kills"
					}
				}
			}

			"clear_storage_per_query"	"1"
			"progress_stored_in"		"1"
			"post_tests"
			{
				"test_kill_count"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<kill_count>"
				}
			}
		}

		"variables"
		{
			"<kill_count>"
			{
				"format"	"int"
				"index"		"0"
			}
			"<game_time>"
			{
				"format"	"gametime"
				"index"		"1"
			}
		}
	}

	"get_smoke_kills"
	{
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"buff_lost"
				{
					"event"					"modifier_remove"
					"modifier"				"modifier_smoke_of_deceit"
					"target"				"!hero"
				}	
				"separator"						"30.0"
				"enemy_hero_kill"
				{
					"event"						"death"
					"target_must_be_hero"		"1"
					"target_team"				"!enemyteam"
					"attacker"					"!hero"
				}
			}
			"progress_stored_in"		"1"
			"postmatch_increments"
			{
				"storage"
				{
					"1"
					{
						"aggregator"	"increment"
					}
				}
			}
			"post_tests"
			{
				"test_smoke_ganks"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<smoke_ganks>"
				}
			}
		}
		"variables"
		{
			"<smoke_ganks>"
			{
				"format"	"int"
				"index"		"0"
			}
		}
	}

	"get_smoke_kills_by_time"
	{
		"events"
		{
			"matching_type"		"linear_series"
			"success_gametime"		"<game_time>"
			"query"
			{
				"buff_lost"
				{
					"event"					"modifier_remove"
					"modifier"				"modifier_smoke_of_deceit"
					"target"				"!hero"
				}	
				"separator"						"30.0"
				"enemy_hero_kill"
				{
					"event"						"death"
					"target_must_be_hero"		"1"
					"target_team"				"!enemyteam"
					"attacker"					"!hero"
				}
			}
			"progress_stored_in"		"1"
			"postmatch_increments"
			{
				"storage"
				{
					"1"
					{
						"aggregator"	"increment"
					}
				}
				
			}
			"post_tests"
			{
				"test_smoke_ganks"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<smoke_ganks>"
				}
			}
		}
		"variables"
		{
			"<smoke_ganks>"
			{
				"format"	"int"
				"index"		"0"
			}
			"<game_time>"
			{
				"format"	"gametime"
				"index"		"1"
			}
		}
	}

	"player_death_counter"
	{
		"challengetype"		"5"
		"events"
		{
			"matching_type"		"game_state"
			"success_gametime"	"<game_time>"
			"query"
			{
				"state_values"
				{
					"1"
					{
						"key"				"deaths"
						"aggregator"		"count"	
					}
				}
			}

			"progress_stored_in"		"1"
			"clear_storage_per_query"	"1"
			"post_tests"
			{
				"test_player_killed"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<max_death_count>"
				}
			}
		}

		"variables"
		{
			"<max_death_count>"
			{
				"format"	"int"
				"index"		"0"
			}
			"<game_time>"
			{
				"format"	"gametime"
				"index"		"1"
			}
		}
	}

	"player_last_hit_counter"
	{
		"challengetype"		"6"
		"events"
		{
			"matching_type"		"linear_series"
			"success_gametime"		"<game_time>"
			"query"
			{
				"detect_last_hit"
				{
					"event"			"death"
					"attacker"		"!hero"
					"storage"
					{
						"1"
						{
							"key"			"last_hits"
							"aggregator"	"max"	
						}
					}	
				}
			}

			"progress_stored_in"		"1"
			"post_tests"
			{
				"test_player_killed"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<last_hit_count>"
				}
			}
		}

		"variables"
		{
			"<last_hit_count>"
			{
				"format"	"int"
				"index"		"0"
			}
			"<game_time>"
			{
				"format"	"gametime"
				"index"		"1"
			}
		}
	}

	"tiny_combo"
	{
		"challengetype"	"7"
		"requiredhero"	"19" 
		
		"events"
		{
			"matching_type"		"linear_series"
			"never_match_queries" "1"
			"query"
			{
				"second_avalanche_hit"
				{
					"event"		"modifier_add"
					"modifier"	"modifier_tiny_avalanche_stun"
					"target"	"!1"
					"target_must_be_hero"		"1"	
				}		
				"separator"		"2.0"
				"first_avalanche_hit"
				{
					"event"		"damage"
					"attack"	"tiny_toss"
					"target_must_be_hero"		"1"	
					"storage"
					{
						"1"			"target"
					}
				}
			}
			"progress_stored_in"		"2"
			"postmatch_increments"
			{
				"storage"
				{
					"2"
					{
						"aggregator"	"increment"
					}
				}
				
			}
		}
	}

	"kill_courier"
	{    
		"challengetype"		"8"
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"courier_kill"
				{
					"event"				"death"
					"damage_source"		"!hero"
					"target"			"npc_dota_courier"
					"storage"
					{
						"1"
						{
							"aggregator"	"increment"
						}
					}
				}          
			}

			"progress_stored_in"	"1"
			"post_tests"
			{
				"test_couriers_killed"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"1"
				}
			}
		}
	}

	"kill_roshan_counter"
	{
		"challengetype"	"9"
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"kill_roshan"
				{
					"event"			"death"
					"damage_source"		"!hero"
					"target"		"npc_dota_roshan"
					"storage"
					{
						"1"
						{
							"aggregator"	"increment"
						}
					}
				}
			}
			"progress_stored_in"		"1"
			"post_tests"
			{
				"test_roshans_killed"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<roshan_max_kill_count>"
				}
			}
		}

		"variables"
		{
			"<roshan_max_kill_count>"
			{
				"format"	"int"
				"index"		"0"
			}
		}
	}

	"kill_tier_one_tower"
	{
		"challengetype"		"10"
		"events"
		{
			"matching_type"		"linear_series"
			"fail_gametime"		"<game_time>"
			"query"
			{
				"find_tower_kill"
				{
					"event"			"team_building_kill"
					"team"			"!team"
					"enemyteam"		"!enemyteam"
					"building_type"		"tower"
					"storage"
					{
						"1"
						{
							"aggregator"	"increment"
						}
					}
				}
			}
			"progress_stored_in"		"1"
			"post_tests"
			{
				"test_buildings_killed"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"1"
				}
			}
		}

		"variables"
		{
			"<game_time>"
			{
				"format"	"gametime"
				"index"		"0"
			}
		}
	}

	"kill_tier_one_tower_time"
	{
		"challengetype"		"11"
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"find_tower_kill"
				{
					"event"			"team_building_kill"
					"building_type"		"tower"
					"storage"
					{
						"1"
						{
							"key"			"game_time"
							"aggregator"	"max"
						}
					}
				}
			}
			"progress_stored_in"		"1"
		}
	}

	"deny_tower"
	{
		"challengetype"		"12"
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"find_tower_kill"
				{
					"event"			"team_building_kill"
					"team"			"!team"
					"enemyteam"		"!team"
					"building_type"		"tower"
					"storage"
					{
						"1"
						{
							"aggregator"	"increment"
						}
					}	
				}
			}
			"progress_stored_in"		"1"
			"post_tests"
			{
				"deny_count"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"1"
				}
			}
		}
	}

	"tower_kill_counter"
	{
		"challengetype"		"13"
		"events"
		{
			"matching_type"		"linear_series"
			"success_gametime"	"<game_time>"
			"query"
			{
				"find_tower_kill"
				{
					"event"			"team_building_kill"
					"building_type"		"tower"
					"storage"
					{
						"1"
						{
							"aggregator"	"increment"
						}
					}	
				}
			}
			"progress_stored_in"		"1"
			"post_tests"
			{
				"max_tower_count"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<max_towers>"
				}
			}
		}

		"variables"
		{
			"<game_time>"
			{
				"format"	"gametime"
				"index"		"0"
			}
			"<max_towers>"
			{
				"format"	"int"
				"index"		"1"
			}
		}
	}

	"snatch_aegis"
	{
		"challengetype" "96"
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"take_aegis"
				{
					"event"			"aegis_taken"
					"playerid"		"!playerid"
					"snatched"		"1"
					"storage"
					{
						"1"
						{
							"aggregator"	"increment"
						}
					}
				}	
			}
			"clear_storage_per_query"	"0"
			"progress_stored_in"		"1"
			"post_tests"
			{
				"test_aegises"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"1"
				}
			}
		}
	}

	"get_first_blood"
	{
		"challengetype"	"46"
		"events"
		{
			"matching_type"		"linear_series"
			"success_gametime"		"<game_time>"
			"query"
			{
				"get_first_blood"
				{
					"event"			"first_blood"
					"team"			"!team"
					"assist_player_id"	"!playerid"
					"storage"
					{
						"1"
						{
							"key"			"game_time"
							"aggregator"	"max"	
						}
					}
				}
			}
			"progress_stored_in"		"1"
		}
		"variables"
		{
			"<game_time>"
			{
				"format"	"gametime"
				"index"		"0"
			}
		} 
	}

	"total_damage"
	{    
		"challengetype"	"17"
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"damage_event"
				{
					"event"			"damage"
					"damage_source"		"!hero"
					"attacker_team"		"!team"
					"target_team"		"!enemyteam"
					"target_must_be_hero" 	"1"
					"storage"
					{
						"1"
						{
							"key"			"value"
							"aggregator"	"sum"	
						}
					}
				}          
			}
			"progress_stored_in"		"1"
			"post_tests"
			{
				"test_total_damage"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<total_damage>"
				}
			}
		}
		"variables"
		{
			"<total_damage>"
			{
				"format"	"int"
				"index"		"0"
			}
		}
	}

	"pickup_runes"
	{
		"challengetype"	"39"
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"rune"
				{
					"event"			"pickup_rune"
					"playerid"		"!playerid"
				}
			}
			"progress_stored_in"		"1"
			"postmatch_increments"
			{
				"storage"
				{
					"1"
					{
						"aggregator"	"increment"
					}
				}
				
			}
			"post_tests"
			{
				"runes_picked_up"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<rune_count>"
				}
			}
		}
		"variables"
		{
			"<rune_count>"
			{
				"format"	"int"
				"index"		"0"
			}
		}
	}

	"pickup_runes_by_time"
	{
		"events"
		{
			"matching_type"		"linear_series"
			"success_gametime"		"<game_time>"
			"never_match_queries" "1"
			"query"
			{
				"rune"
				{
					"event"			"pickup_rune"
					"playerid"		"!playerid"
				}
			}
			"progress_stored_in"		"1"
			"postmatch_increments"
			{
				"storage"
				{
					"1"
					{
						"aggregator"	"increment"
					}
				}
				
			}
			"post_tests"
			{
				"test_runes_picked_up"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<rune_count>"
				}
			}
		}
		"variables"
		{
			"<game_time>"
			{
				"format"	"gametime"
				"index"		"0"
			}
		}
	}

	"place_wards_by_time"
	{
		"events"
		{
			"matching_type"		"linear_series"
			"success_gametime"		"<game_time>"
			"query"
			{
				"place_ward"
				{
					"event"			"playerstats"
					"playerid"		"!playerid"
					"storage"
					{
						"1"			"obs_wards_placed"
					}
				}
			}
			"progress_stored_in"		"1"
			"clear_storage_per_query"	"1"
			"post_tests"
			{
				"test_wards_count"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<wards>"
				}
			}
		}
		"variables"
		{
			"<wards>"
			{
				"format"	"int"
				"index"		"0"
			}
			"<game_time>"
			{
				"format"	"gametime"
				"index"		"1"
			}
		}
	}

	"place_wards"
	{
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"place_ward"
				{
					"event"			"playerstats"
					"playerid"		"!playerid"
					"storage"
					{
						"1"			"obs_wards_placed"
					}
				}
			}
			"progress_stored_in"		"1"
			"clear_storage_per_query"	"1"
			"post_tests"
			{
				"test_wards_count"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<wards>"
				}
			}
		}
		"variables"
		{
			"<wards>"
			{
				"format"	"int"
				"index"		"0"
			}
		}
	}

	"deward_enemy_wards_by_time"
	{
		"events"
		{
			"matching_type"		"linear_series"
			"success_gametime"		"<game_time>"
			"query"
			{
				"obs_ward_kill"
				{
					"event"			"death"
					"attacker"		"!hero"
					"target"		"npc_dota_observer_wards"
					"storage"
					{
						"1"
						{
							"aggregator"	"increment"
						}
					}	
				}
				"separator"    "OR" 
				"sentry_ward_kill"
				{
					"event"			"death"
					"attacker"		"!hero"
					"target"		"npc_dota_sentry_wards"
					"storage"
					{
						"1"
						{
							"aggregator"	"increment"
						}
					}	
				}
			}

			"clear_storage_per_query"	"0"
			"progress_stored_in"		"1"
			"post_tests"
			{
				"test_kill_count"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<dewards>"
				}
			}
		}
		"variables"
		{
			"<dewards>"
			{
				"format"	"int"
				"index"		"0"
			}
			"<game_time>"
			{
				"format"	"gametime"
				"index"		"1"
			}
		}
	}

	"take_aegis"
	{
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"take_aegis"
				{
					"event"			"aegis_taken"
					"playerid"		"!playerid"
					"storage"
					{
						"1"
						{
							"aggregator"	"increment"
						}
					}
				}	
			}

			"clear_storage_per_query"	"0"
			"progress_stored_in"		"1"
			"post_tests"
			{
				"test_aegises"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<aegises_taken>"
				}
			}
		}

		"variables"
		{
			"<aegises_taken>"
			{
				"format"	"int"
				"index"		"0"
			}	
		}
	}
	
	"physical_attack_damage_greater_than_amount"
	{
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"find_damage"
				{
					"event"				  "damage"
					"attacker"			  "!hero"
					"target_must_be_hero" "1"
					"damage_category"		"attack"
					"storage"
					{
						"1"
						{
							"key"			"value"
							"aggregator"	"max"	
						}
					}
				}
			}

			"clear_storage_per_query"	"0"
			"progress_stored_in"		"1"
			"post_tests"
			{
				"test_value"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<damage_in_attack>"
				}
			}
		
		}
		
		"variables"
		{
			"<damage_in_attack>"
			{
				"format"	"int"
				"index"		"0"
			}
		}
	}

	"deal_physical_damage"
	{
		"challengetype"		"68"
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"find_damage"
				{
					"event"			"damage"
					"damage_type"	"physical"
					"attacker"		"!hero"
					"target_must_be_hero" "1"
					"attacker_team"		"!team"
					"target_team"		"!enemyteam"
					"storage"
					{
						"1"
						{
							"key"			"value"
							"aggregator"	"sum"	
						}
					}
				}
			}
			"clear_storage_per_query"	"0"
			"progress_stored_in"		"1"
			"post_tests"
			{
				"test_value"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<accum_damage>"
				}
			}
		}
		
		"variables"
		{
			"<accum_damage>"
			{
				"format"	"int"
				"index"		"0"
			}
		}
	}

	"deal_magic_or_pure_damage"
	{
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"find_damage"
				{
					"event"			"damage"
					"damage_type"	"magical"
					"attacker"		"!hero"
					"target_must_be_hero" "1"
					"attacker_team"		"!team"
					"target_team"		"!enemyteam"
					"storage"
					{
						"1"
						{
							"key"			"value"
							"aggregator"	"sum"	
						}
					}
				}
				"separator"		"OR"
				"find_damage"
				{
					"event"			"damage"
					"damage_type"	"pure"
					"attacker"		"!hero"
					"target_must_be_hero" "1"
					"attacker_team"		"!team"
					"target_team"		"!enemyteam"
					"storage"
					{
						"1"
						{
							"key"			"value"
							"aggregator"	"sum"	
						}
					}
				}
			}
			"clear_storage_per_query"	"0"
			"progress_stored_in"		"1"
			"post_tests"
			{
				"test_value"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<accum_damage>"
				}
			}
		}
		"variables"
		{
			"<accum_damage>"
			{
				"format"	"int"
				"index"		"0"
			}
		}
	}

	"deal_magic_or_pure_damage_by_time"
	{
		"events"
		{
			"matching_type"		"linear_series"
			"success_gametime"		"<game_time>"
			"query"
			{
				"find_damage"
				{
					"event"			"damage"
					"damage_type"	"magical"
					"attacker"		"!hero"
					"target_must_be_hero" "1"
					"attacker_team"		"!team"
					"target_team"		"!enemyteam"
					"storage"
					{
						"1"
						{
							"key"			"value"
							"aggregator"	"sum"	
						}
					}
				}
				"separator"		"OR"
				"find_damage"
				{
					"event"			"damage"
					"damage_type"	"pure"
					"attacker"		"!hero"
					"target_must_be_hero" "1"
					"attacker_team"		"!team"
					"target_team"		"!enemyteam"
					"storage"
					{
						"1"
						{
							"key"			"value"
							"aggregator"	"sum"	
						}
					}
				}
			}
			"clear_storage_per_query"	"0"
			"progress_stored_in"		"1"
			"post_tests"
			{
				"test_value"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<accum_damage>"
				}
			}
		}
		"variables"
		{
			"<accum_damage>"
			{
				"format"	"int"
				"index"		"0"
			}
			"<game_time>"
			{
				"format"	"gametime"
				"index"		"1"
			}
		}
	}

	"networth_total"
	{    
		"events"
		{
			"matching_type"		"game_state"
			"query"
			{
				"state_values"
				{
					"1"
					{
						"key"				"networth"
						"aggregator"		"count"	
					}
				}
			}
			"progress_stored_in"		"1"
			"clear_storage_per_query"	"1"
			"post_tests"
			{
				"test_networth"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<target_networth>"
				}
			}
		}
		"variables"
		{
			"<target_networth>"
			{
				"format"	"int"
				"index"		"0"
			}
		}
	}

	"networth_by_time"
	{    
		"challengetype"	"77"
		"events"
		{
			"success_gametime"		"<game_time>"
			"matching_type"		"game_state"
			"query"
			{
				"state_values"
				{
					"1"
					{
						"key"				"networth"
						"aggregator"		"count"	
					}
				}
			}
			"progress_stored_in"		"1"
			"clear_storage_per_query"	"1"
			"post_tests"
			{
				"test_networth"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<target_networth>"
				}
			}
		}
		"variables"
		{
			"<target_networth>"
			{
				"format"	"int"
				"index"		"0"
			}
			"<game_time>"
			{
				"format"	"gametime"
				"index"		"1"
			}
		}
	}

	"kill_barracks_time"
	{
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"find_tower_kill"
				{
					"event"			"team_building_kill"
					"building_type"		"barracks"
					"storage"
					{
						"1"
						{
							"key"			"game_time"
							"aggregator"	"max"
						}
					}
				}
			}
			"progress_stored_in"		"1"
		}
	}

	"kill_barracks"
	{
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"find_tower_kill"
				{
					"event"			"team_building_kill"
					"team"			"!team"
					"enemyteam"		"!enemyteam"
					"building_type"		"barracks"
					"storage"
					{
						"1"
						{
							"aggregator"	"increment"
						}
					}
				}
			}
			"progress_stored_in"		"1"
			"post_tests"
			{
				"test_buildings_killed"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"1"
				}
			}
		}
	}

	"kill_ancient_time"
	{
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"find_tower_kill"
				{
					"event"			"team_building_kill"
					"building_type"		"fort"
					"storage"
					{
						"1"
						{
							"key"			"game_time"
							"aggregator"	"max"
						}
					}
				}
			}
			"progress_stored_in"		"1"
		}
	}

	"kill_ancient"
	{
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"find_tower_kill"
				{
					"event"			"team_building_kill"
					"enemyteam"		"!enemyteam"
					"building_type"		"fort"
					"storage"
					{
						"1"
						{
							"aggregator"	"increment"
						}
					}
				}
			}
			"progress_stored_in"		"1"
		}
	}

	"stack_ancient_camps"
	{
		"events"
		{
			"matching_type"		"linear_series"
			"success_gametime"	"<game_time>"
			//"never_match_queries" "1"
			"query"
			{
				"stack_camp"
				{
					"event"			"neutral_camp_stacked"
					"camp_type"		"ancient"
					"playerid"		"!playerid"
				}
			}
			"progress_stored_in"		"1"
			"postmatch_increments"
			{
				"storage"
				{
					"1"
					{
						"aggregator"	"increment"
					}
				}
			}
			"post_tests"
			{
				"ancient_camps_stacked"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<ancient_stack_count>"
				}
			}
		}

		"variables"
		{
			"<ancient_stack_count>"
			{
				"format"	"int"
				"index"		"0"
			}
			"<game_time>"
			{
				"format"	"gametime"
				"index"		"1"
			}
		}
	}

	"cancel_tps_by_time"
	{
		"events"
		{
			"matching_type"		"linear_series"
			"success_gametime"	"<game_time>"
			"query"
			{
				"stunned"
				{
					"event"									"modifier_add"
					"caster"								"!hero"
					"is_stun"								"1"
					"target"								"!1"		
				}	
				"separator"					"0.01"
				"teleport_finished"
				{
					"event"						"modifier_remove"
					"modifier"					"modifier_teleporting"
					"storage"
					{
						"1"			"target"
					}
				}	
			}

			"progress_stored_in"		"2"
			"postmatch_increments"
			{
				"storage"
				{
					"2"
					{
						"aggregator"	"increment"
					}
				}
				
			}
			"post_tests"
			{
				"test_tps_cancelled"
				{
					"storage"		"2"
					"compare"		">="
					"amount"		"<tps_cancelled>"
				}
			}
		}

		"variables"
		{
			"<tps_cancelled>"
			{
				"format"	"int"
				"index"		"0"
			}
			"<game_time>"
			{
				"format"	"gametime"
				"index"		"1"
			}
		} 
	}

	"buy_blink"
	{
		"events"
		{
			"matching_type"		"linear_series"
			"query"
			{
				"detect_purchase"
				{
					"event"			"purchase"
					"target"		"!hero"
					"itemid"		"1"
					"gametime"		"<game_time>"
					"storage"
					{
						"1"
						{
							"aggregator"	"increment"
						}
					}	
				}
			}
			"progress_stored_in"	"1"
			"post_tests"
			{
				"test_blinks_purchased"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<blinks_purchased>"
				}
			}
		}
	}

	"buy_blink_by_time"
	{
		"events"
		{
			"success_gametime"		"<game_time>"
			"matching_type"		"linear_series"
			"never_match_queries" "1"
			"query"
			{
				"detect_purchase"
				{
					"event"			"purchase"
					"target"		"!hero"
					"itemid"		"1"
					"gametime"		"<game_time>"
					"storage"
					{
						"1"
						{
							"aggregator"	"increment"
						}
					}	
				}
			}
			"progress_stored_in"	"1"
			"post_tests"
			{
				"test_blinks_purchased"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<blinks_purchased>"
				}
			}
		}
		"variables"
		{
			"<game_time>"
			{
				"format"	"gametime"
				"index"		"0"
			}
		}
	}

	"tree_cut_count_by_time"
	{
		"events"
		{
			"success_gametime"		"<game_time>"
			"matching_type"			"linear_series"
			"query"
			{
				"find_tree_cut"
				{
					"event"			"tree_cut"
					"playerid"		"!playerid"
					"storage"
					{
						"1"
						{
							"key"		"value"
							"aggregator" "sum"
						}
					}	
				}
			}
			"post_tests"
			{
				"test_tree_cut_count"
				{
					"storage"		"1"
					"compare"		">="
					"amount"		"<tree_cuts>"
				}
			}
			"progress_stored_in"		"1"
			"clear_storage_per_query"	"0"
		}
		"variables"
		{
			"<tree_cuts>"
			{
				"format"	"int"
				"index"		"0"
			}
			"<game_time>"
			{
				"format"	"gametime"
				"index"		"1"
			}
		}
	}

}
